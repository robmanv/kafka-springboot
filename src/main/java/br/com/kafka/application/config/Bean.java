package br.com.kafka.application.config;

import br.com.kafka.adapters.clients.JSONPlaceHolderClient;
import br.com.kafka.adapters.exception.CustomErrorDecoder;
import br.com.kafka.adapters.out.ListenerKafka;
import br.com.kafka.core.entities.Cliente;
import br.com.kafka.core.entities.Post;
import br.com.kafka.core.utils.ProgressBar;
import com.amazonaws.auth.AWSCredentialsProvider;
import com.amazonaws.auth.DefaultAWSCredentialsProviderChain;
import com.amazonaws.regions.Region;
import com.amazonaws.regions.Regions;
import com.amazonaws.services.secretsmanager.AWSSecretsManager;
import com.amazonaws.services.secretsmanager.AWSSecretsManagerClient;
import com.amazonaws.services.sqs.AmazonSQS;
import com.amazonaws.services.sqs.AmazonSQSClient;
import com.amazonaws.services.sqs.AmazonSQSClientBuilder;
import feign.RequestInterceptor;
import feign.codec.ErrorDecoder;
import feign.okhttp.OkHttpClient;
import io.netty.channel.*;
import io.netty.handler.logging.LogLevel;
import io.netty.handler.logging.LoggingHandler;
import org.apache.http.entity.ContentType;
import org.modelmapper.ModelMapper;
import org.springframework.batch.item.ExecutionContext;
import org.springframework.context.annotation.Configuration;
import org.springframework.kafka.listener.LoggingErrorHandler;
import software.amazon.awssdk.auth.credentials.DefaultCredentialsProvider;
import software.amazon.awssdk.core.client.config.ClientAsyncConfiguration;
import software.amazon.awssdk.core.client.config.ClientOverrideConfiguration;
import software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedAsyncClient;
import software.amazon.awssdk.enhanced.dynamodb.extensions.AutoGeneratedTimestampRecordExtension;
import software.amazon.awssdk.http.nio.netty.NettyNioAsyncHttpClient;
import software.amazon.awssdk.services.dynamodb.DynamoDbAsyncClient;

import java.net.URI;
import java.time.Duration;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;

@Configuration
public class Bean {

//    private Cliente cliente = new Cliente(1, "Robson Vellasques", 40, 1.81, 105.0, 10000.0, "Rua Vergueiro");

    @org.springframework.context.annotation.Bean
    public Cliente cliente() {
        return new Cliente();
    }

    @org.springframework.context.annotation.Bean
    public ModelMapper modelMapper() {
        return new ModelMapper();
    }

    @org.springframework.context.annotation.Bean
    public OkHttpClient client() {
        return new OkHttpClient();
    }

    @org.springframework.context.annotation.Bean
    public ErrorDecoder errorDecoder() {
        return new CustomErrorDecoder();
    }

    @org.springframework.context.annotation.Bean
    public RequestInterceptor requestInterceptor() {
        return requestTemplate -> {
            requestTemplate.header("user", "user");
            requestTemplate.header("password", "password");
            requestTemplate.header("Accept", ContentType.APPLICATION_JSON.getMimeType());
        };
    }

    @org.springframework.context.annotation.Bean
    public AWSCredentialsProvider awsCredentialsProvider() {
        return new DefaultAWSCredentialsProviderChain();
    }

    @org.springframework.context.annotation.Bean
    public AWSSecretsManager awsSecretsManager() {
        Region region = Region.getRegion(Regions.SA_EAST_1);
        return AWSSecretsManagerClient.builder()
                .withRegion(String.valueOf(region))
                .withCredentials(awsCredentialsProvider())
                .build();
    }

    @org.springframework.context.annotation.Bean
    public ProgressBar progressBar() {
        ProgressBar progressBar = new ProgressBar();
        progressBar.setMaxSquares(100);
        progressBar.setCount(new AtomicInteger(0));
        return progressBar;
    }


    @org.springframework.context.annotation.Bean
    public LoggingErrorHandler errorHandler() {
        return new LoggingErrorHandler();
    }

    @org.springframework.context.annotation.Bean
    public AmazonSQS amazonSQS() {
        return AmazonSQSClientBuilder.defaultClient();
    }

    @org.springframework.context.annotation.Bean
    public ExecutionContext executionContext() {
        return new ExecutionContext();
    }

    @org.springframework.context.annotation.Bean
    public DynamoDbAsyncClient dynamoDbAsyncClient() {

        ChannelHandler loggingHandler = new LoggingHandler(LogLevel.INFO);

        NettyNioAsyncHttpClient.Builder httpClientBuilder =
                NettyNioAsyncHttpClient.builder()
                        .connectionTimeout(Duration.ofMinutes(5))
                        .readTimeout(Duration.ofMinutes(5))
                        .writeTimeout(Duration.ofMinutes(5))
                        .maxPendingConnectionAcquires(1000)
                        .maxConcurrency(100);

        ClientAsyncConfiguration.Builder asyncConfig =
                ClientAsyncConfiguration.builder();

        ClientOverrideConfiguration overrideConfig = ClientOverrideConfiguration.builder()
                .apiCallTimeout(Duration.ofSeconds(5)) // tempo limite de 5 segundos para cada solicitação
                .apiCallAttemptTimeout(Duration.ofSeconds(10)) // tempo limite máximo de 10 segundos para cada tentativa de solicitação
                .build();


        DynamoDbAsyncClient client =
                DynamoDbAsyncClient.builder()
//                        .httpClientBuilder(httpClientBuilder)
//                        .asyncConfiguration(asyncConfig.build())
                        .endpointOverride(URI.create("http://localhost:4566"))
                        .overrideConfiguration(overrideConfig)
                        .build();

        return client;
    }

    @org.springframework.context.annotation.Bean
    public DynamoDbEnhancedAsyncClient dynamoDbEnhancedAsyncClient() {
        DynamoDbEnhancedAsyncClient enhancedClient =
                DynamoDbEnhancedAsyncClient
                        .builder()
                        .dynamoDbClient(dynamoDbAsyncClient())
                        .extensions(AutoGeneratedTimestampRecordExtension.create())
                        .build();

        return enhancedClient;
    }

    public class MyChannelInitializer extends ChannelInitializer<Channel> {
        @Override
        protected void initChannel(Channel ch) throws Exception {
            ChannelPipeline pipeline = ch.pipeline();
            pipeline.addLast(new LoggingHandler(LogLevel.INFO));
        }
    }
}